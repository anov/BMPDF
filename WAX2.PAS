{$A+,B-,D+,E-,F-,G-,I-,L+,N-,O-,P-,Q-,R-,S-,T-,V-,X+}
{$M 65000,0,655360}
{	Wax_header=record
		   version:longint;
		   nseqs,
		   nframes,
		   ncells:longint;
		   xscale,yscale,xtralight,pad4:longint;
		   waxes:array [0..31] of longint;
		  end;
       twax=record
	     wwidth,wheight:longint;
	     framerate,   (*? 8,0*)
	     nframes:word;
	     pad1,pad2,pad3,pad4:longint;
	     seqs:array[0..31] of longint;
	    end;
       tseq=record
	     pad1,pad2,pad3,pad4:longint;
	     frames:array[0..31] of longint;
	    end;}

const idir='';
      odir='';
      maxheight=6000;
      make:boolean=false;
      show:boolean=false;
      save:boolean=true;
      id='#Generated by WAX2'#13#10;
      nline:integer=0;
      eol=#13#10;
      pic_type:byte=1;
{$i wtypes.inc}
const
	defext:ext='.bmp';
const
dpal:tpal=
((red:0;green:0;blue:0),
(red:252;green:252;blue:252),
(red:208;green:236;blue:252),
(red:168;green:220;blue:252),
(red:124;green:204;blue:252),
(red:84;green:192;blue:252),
(red:252;green:0;blue:0),
(red:204;green:0;blue:0),
(red:144;green:0;blue:0),
(red:68;green:0;blue:0),
(red:0;green:252;blue:0),
(red:0;green:200;blue:0),
(red:0;green:152;blue:0),
(red:0;green:92;blue:0),
(red:0;green:52;blue:0),
(red:0;green:88;blue:252),
(red:0;green:36;blue:240),
(red:0;green:16;blue:188),
(red:0;green:4;blue:140),
(red:248;green:224;blue:96),
(red:244;green:184;blue:52),
(red:244;green:136;blue:12),
(red:216;green:88;blue:12),
(red:180;green:44;blue:4),
(red:252;green:0;blue:252),
(red:252;green:0;blue:252),
(red:252;green:0;blue:252),
(red:252;green:0;blue:252),
(red:252;green:0;blue:252),
(red:252;green:0;blue:252),
(red:252;green:0;blue:252),
(red:252;green:0;blue:252),
(red:232;green:232;blue:232),
(red:224;green:224;blue:224),
(red:216;green:216;blue:216),
(red:208;green:208;blue:208),
(red:204;green:204;blue:204),
(red:196;green:196;blue:196),
(red:188;green:188;blue:188),
(red:180;green:180;blue:180),
(red:172;green:172;blue:172),
(red:168;green:168;blue:168),
(red:160;green:160;blue:160),
(red:152;green:152;blue:152),
(red:144;green:144;blue:144),
(red:140;green:140;blue:140),
(red:132;green:132;blue:132),
(red:124;green:124;blue:124),
(red:116;green:116;blue:116),
(red:112;green:112;blue:112),
(red:104;green:104;blue:104),
(red:100;green:100;blue:100),
(red:92;green:92;blue:92),
(red:88;green:88;blue:88),
(red:80;green:80;blue:80),
(red:76;green:76;blue:76),
(red:68;green:68;blue:68),
(red:64;green:64;blue:64),
(red:56;green:56;blue:56),
(red:52;green:52;blue:52),
(red:44;green:44;blue:44),
(red:40;green:40;blue:40),
(red:32;green:32;blue:32),
(red:28;green:28;blue:28),
(red:100;green:108;blue:132),
(red:92;green:100;blue:120),
(red:84;green:92;blue:112),
(red:76;green:84;blue:104),
(red:72;green:76;blue:96),
(red:64;green:68;blue:84),
(red:56;green:64;blue:76),
(red:52;green:56;blue:68),
(red:44;green:48;blue:60),
(red:36;green:40;blue:48),
(red:28;green:32;blue:40),
(red:24;green:24;blue:32),
(red:16;green:16;blue:24),
(red:8;green:12;blue:12),
(red:4;green:4;blue:4),
(red:0;green:0;blue:0),
(red:252;green:228;blue:176),
(red:236;green:208;blue:152),
(red:220;green:192;blue:132),
(red:208;green:176;blue:116),
(red:192;green:160;blue:96),
(red:180;green:144;blue:80),
(red:164;green:132;blue:68),
(red:148;green:116;blue:52),
(red:136;green:100;blue:40),
(red:120;green:88;blue:28),
(red:108;green:76;blue:20),
(red:92;green:64;blue:12),
(red:76;green:52;blue:8),
(red:64;green:40;blue:4),
(red:48;green:28;blue:0),
(red:36;green:20;blue:0),
(red:224;green:108;blue:12),
(red:212;green:100;blue:8),
(red:200;green:92;blue:8),
(red:188;green:88;blue:4),
(red:176;green:80;blue:4),
(red:168;green:72;blue:4),
(red:156;green:68;blue:4),
(red:144;green:60;blue:4),
(red:132;green:56;blue:0),
(red:120;green:52;blue:0),
(red:112;green:44;blue:0),
(red:100;green:40;blue:0),
(red:88;green:32;blue:0),
(red:76;green:28;blue:0),
(red:64;green:24;blue:0),
(red:56;green:20;blue:0),
(red:128;green:228;blue:100),
(red:112;green:212;blue:84),
(red:100;green:200;blue:68),
(red:92;green:188;blue:56),
(red:80;green:176;blue:44),
(red:68;green:164;blue:32),
(red:60;green:148;blue:24),
(red:52;green:136;blue:12),
(red:44;green:124;blue:8),
(red:36;green:112;blue:0),
(red:32;green:100;blue:0),
(red:48;green:84;blue:4),
(red:56;green:72;blue:4),
(red:56;green:56;blue:8),
(red:44;green:40;blue:8),
(red:32;green:24;blue:8),
(red:252;green:212;blue:200),
(red:244;green:196;blue:180),
(red:240;green:184;blue:164),
(red:232;green:172;blue:148),
(red:224;green:160;blue:132),
(red:220;green:148;blue:116),
(red:212;green:136;blue:104),
(red:208;green:128;blue:92),
(red:200;green:116;blue:76),
(red:196;green:108;blue:64),
(red:188;green:100;blue:52),
(red:184;green:92;blue:40),
(red:176;green:84;blue:32),
(red:172;green:80;blue:20),
(red:164;green:72;blue:12),
(red:160;green:68;blue:4),
(red:148;green:92;blue:0),
(red:136;green:76;blue:0),
(red:124;green:60;blue:0),
(red:112;green:48;blue:0),
(red:104;green:36;blue:0),
(red:92;green:28;blue:0),
(red:80;green:16;blue:0),
(red:72;green:12;blue:0),
(red:0;green:0;blue:252),
(red:0;green:0;blue:224),
(red:0;green:0;blue:200),
(red:0;green:0;blue:176),
(red:0;green:0;blue:148),
(red:0;green:0;blue:124),
(red:0;green:0;blue:100),
(red:0;green:0;blue:76),
(red:252;green:0;blue:0),
(red:224;green:0;blue:0),
(red:196;green:0;blue:0),
(red:168;green:0;blue:0),
(red:140;green:0;blue:0),
(red:112;green:0;blue:0),
(red:84;green:0;blue:0),
(red:56;green:0;blue:0),
(red:252;green:128;blue:0),
(red:224;green:108;blue:0),
(red:200;green:92;blue:0),
(red:176;green:76;blue:0),
(red:152;green:60;blue:0),
(red:128;green:44;blue:0),
(red:104;green:32;blue:0),
(red:80;green:24;blue:0),
(red:192;green:112;blue:68),
(red:180;green:104;blue:60),
(red:168;green:96;blue:56),
(red:156;green:88;blue:52),
(red:148;green:84;blue:48),
(red:136;green:76;blue:44),
(red:124;green:68;blue:36),
(red:116;green:64;blue:32),
(red:104;green:56;blue:28),
(red:92;green:48;blue:24),
(red:80;green:44;blue:20),
(red:72;green:36;blue:16),
(red:60;green:32;blue:12),
(red:48;green:24;blue:8),
(red:40;green:20;blue:8),
(red:60;green:32;blue:16),
(red:184;green:232;blue:252),
(red:168;green:224;blue:248),
(red:156;green:220;blue:248),
(red:140;green:212;blue:244),
(red:128;green:204;blue:240),
(red:116;green:196;blue:240),
(red:100;green:192;blue:236),
(red:88;green:184;blue:236),
(red:76;green:176;blue:232),
(red:64;green:172;blue:232),
(red:52;green:164;blue:228),
(red:40;green:156;blue:228),
(red:28;green:148;blue:224),
(red:16;green:140;blue:224),
(red:4;green:136;blue:220),
(red:0;green:128;blue:220),
(red:100;green:108;blue:132),
(red:96;green:104;blue:128),
(red:92;green:100;blue:120),
(red:88;green:96;blue:116),
(red:84;green:92;blue:112),
(red:80;green:88;blue:108),
(red:80;green:84;blue:104),
(red:76;green:80;blue:100),
(red:72;green:76;blue:96),
(red:68;green:76;blue:92),
(red:64;green:72;blue:88),
(red:60;green:68;blue:84),
(red:60;green:64;blue:80),
(red:56;green:60;blue:72),
(red:52;green:56;blue:68),
(red:48;green:52;blue:64),
(red:44;green:48;blue:60),
(red:40;green:44;blue:56),
(red:40;green:44;blue:52),
(red:36;green:40;blue:48),
(red:32;green:36;blue:44),
(red:28;green:32;blue:40),
(red:24;green:28;blue:36),
(red:24;green:24;blue:32),
(red:20;green:20;blue:24),
(red:16;green:16;blue:20),
(red:12;green:12;blue:16),
(red:8;green:8;blue:12),
(red:4;green:8;blue:8),
(red:4;green:4;blue:4),
(red:0;green:0;blue:0),
(red:0;green:0;blue:0),
(red:0;green:0;blue:144),
(red:0;green:0;blue:132),
(red:0;green:0;blue:120),
(red:0;green:0;blue:112),
(red:0;green:0;blue:100),
(red:0;green:0;blue:88),
(red:0;green:0;blue:80),
(red:0;green:0;blue:68),
(red:0;green:0;blue:60),
(red:0;green:0;blue:48),
(red:0;green:0;blue:36),
(red:0;green:0;blue:28),
(red:0;green:0;blue:16),
(red:0;green:0;blue:4),
(red:0;green:0;blue:0),
(red:252;green:252;blue:252));
var
    pal:tpal;
    f,fout:file;
    buf:array[0..maxheight-1] of byte;
    cbuf:array[0..maxheight-1] of byte;
    b:tbitmap;
    pm:pmrecord;
    s:string;
    pfile,ofile:fname;
    wh:wax_header;
    waxes,seqs,frames,cells:ttable;
    aseq:tseq;
    awax:twax;
    aframe:fme_header1;
    acell:fme_header2;
    cell_dat:array[0..1023] of cell_data;


{$i wax2bmp.inc}
{$i wparse.inc}

procedure smartguess(var p:pmrecord);
var e:ext;firstpal:boolean;
begin
 firstpal:=false;
 ofile:='';pfile:='';
 if p.files[1]='' then begin get8name(p.files[0],ofile); exit; end;
 e:=getext(p.files[1]);slocase(e);
 if (e='.pal') or (e='.plt') then begin pfile:=p.files[1]; firstpal:=true; end;
 if p.files[2]='' then if firstpal then get8name(p.files[0],ofile)
				   else ofile:=p.files[1]
		  else begin ofile:=p.files[1]; pfile:=p.files[2]; end;
end;

function loadlfdpal(var s:string;var b:tbitmap):integer;
var p:file; i:integer;
   pl:lfd_pal;
begin
loadlfdpal:=-1;
if openread(p,s,'.plt')=-1 then exit;
fread(p,pl,2);
if (pl.first<>0) or (pl.last<>255) then begin Fileerror('Not full pallette',p); close(p); exit; end;
fread(p,pal,sizeof(pal)); b.pal:=pal;
close(p);
if errorcode=0 then loadlfdpal:=0 else Fileerror('Read fault',p);
end;

function savebitmap(var f:file;var b:tbitmap):integer;
var e:ext;
begin
if pic_type=2 then savebitmap:=savePCX(f,b) else savebitmap:=saveBMP(f,b);
end;



function loadpal(var s:string;de:ext;var b:tbitmap):integer;
var p:file; i:integer;e:ext;
begin
e:=getext(s); slocase(e);
if de='.plt' then if e<>'.pal' then begin loadpal:=loadlfdpal(s,b); exit; end;
if e='.dlt' then begin loadpal:=loadlfdpal(s,b); exit; end;
loadpal:=-1;
if openread(p,s,de)=-1 then exit;
fread(p,pal,sizeof(pal));
close(p);
if errorcode<>0 then exit;
for i:=0 to 255 do
 begin
  pal[i].red:=pal[i].red*4;
  pal[i].green:=pal[i].green*4;
  pal[i].blue:=pal[i].blue*4;
 end;
b.pal:=pal;
loadpal:=0;
end;

Procedure Help(s:string);
begin
 if s<>'' then writeln(s);
 Writeln('WAX2 - converts WAX files (DF sprites) to Windows 256 color BMP and PCX files.'#13#10+
	 'WAX2 [switches] file1 [file2] [file3]'#13#10+
	 'File1 - WAX file to process, File2 - BMP file template, File3 - PAL file'#13#10+
	 'If palette is not specified, default is used');
 Writeln('Switches:'#13#10+
	 '/M - generate makefile for 2WAX (see BMPDF.TXT and MAKEFILE.TXT)'#13#10+
	 '/S - show loaded files'#13#10+
	 '/X - force PCX output'#13#10+
	 '/* - do not save files'#13#10+
	 '/V - show loaded files and do not perform any conversion (View)');
 Writeln('Examples:'#13#10,
	 ' wax2 stormfin.wax'#13#10,
	 ' wax2 kell.wax jabship.pal /v'#13#10,
	 ' wax2 /s/m/x phase3x.wax mohc arc.pal');
 halt;
end;


Function createmake(n:fname):integer;
type
	tns=string[20];
const
	deol=#13#10#13#10;
var	t:text;
	i,j:integer;
	s:string;
	ns:string[20];
	iswax8:boolean;
	l:longint;
	ncell:integer;

Function i2s(n:integer):tns;
var s:tns;
begin
 str(n,s);
 i2s:=s;
end;

Function is8(var w:twax):boolean;
var l:longint;n,i:integer;
begin
 is8:=false;
 l:=w.seqs[0];
 if (l<>w.seqs[1]) or (l<>w.seqs[30]) or (l<>w.seqs[31]) then exit;
 for i:=0 to 6 do
 begin
  n:=i*4+2;
  l:=w.seqs[n];
  if (l<>w.seqs[n+1]) or (l<>w.seqs[N+2]) or (l<>w.seqs[n+3]) then exit;
 end;
 is8:=true;
end;

begin
createmake:=-1;
assign(t,n); rewrite(t);
if ioresult<>0 then exit;
Writeln(t,id);
Write(t,'SET INDIR',eol,'SET OUTDIR',eol,'SET PALDIR',deol);
Writeln(t,'WAX ',get13name(pm.files[0]),#13#10'PAL ',get13name(pfile));

Writeln(t,'WAXES ',waxes.n);
for i:=0 to waxes.n-1 do
begin
seek(f,waxes.i[i]);
fread(f,awax,sizeof(awax));
 iswax8:=is8(awax);
 if iswax8 then s:='Seq8=' else s:='Seq32=';
 if iswax8 then
 for j:=0 to 7 do s:=s+i2s(getn(seqs,awax.seqs[j*4]))+','
 else for j:=0 to 31 do s:=s+i2s(getn(seqs,awax.seqs[j]))+',';
 dec(s[0]);
 write(t,i,': ',s,' fr=',awax.framerate);
 if awax.wwidth<>65536 then Write(t,' ww=',awax.wwidth);
 if awax.wheight<>65536 then Write(t,' wh=',awax.wheight);
 writeln(t);
end;

Writeln(t,'SEQS ',seqs.n);
for i:=0 to seqs.n-1 do
begin
seek(f,seqs.i[i]);
fread(f,aseq,sizeof(aseq));
s:='Frames=';
 for j:=0 to 31 do
 begin
  l:=aseq.frames[j];
  if l=0 then break;
  s:=s+i2s(getn(frames,aseq.frames[j]))+',';
 end;
 if s[length(s)]=',' then dec(s[0]);
 writeln(t,i,': ',s);
end;

Writeln(t,'Frames ',frames.n);
for i:=0 to frames.n-1 do
begin
seek(f,frames.i[i]);
fread(f,aframe,sizeof(aframe));
 ncell:=getn(cells,aframe.header2);
 write(t,i,': Cell=',ncell);
 if (-aframe.xshift)<>(cell_dat[ncell].w div 2) then Write(t,' x=',aframe.xshift);
 if (-aframe.yshift)<>cell_dat[ncell].h then Write(t,' y=',aframe.yshift);
 if aframe.flip=0 then writeln(t) else writeln(t,' flip=', aframe.flip);
end;

Writeln(t,'Cells ',cells.n);
for i:=0 to Cells.n-1 do
begin
seek(f,Cells.i[i]);
fread(f,acell,sizeof(acell));
 write(t,i);
 if pic_type=1 then write(t,': bmp=') else write(t,': pcx=');
 Write(t,namen(get13name(ofile),defext,i));
 if acell.compressed<>1 then write(t,' c=',acell.compressed);
 if pfile<>'' then write(t,' pal=1');
 writeln(t);
end;


close(t);
end;




function writebmp(var b:tbitmap; n:fname):integer;
begin
 writebmp:=-1;
 if openwrite(fout,n,defext)=-1 then exit;
 if savebitmap(fout,b)=-1 then exit;
 close(fout);
 if errorcode=0 then writebmp:=0;
end;

procedure getparams;
begin
 parse(string(ptr(PrefixSeg,$80)^),pm);
 if (pm.files[0]='') then help('');
end;

var	i,n:integer;
	path:fname;
	e:ext;
begin
filemode:=0;
getparams;
smartguess(pm);
 if pos('M',pm.sw)<>0 then make:=true;
 if pos('*',pm.sw)<>0 then save:=false;
 if pos('S',pm.sw)<>0 then show:=true;
 if pos('X',pm.sw)<>0 then pic_type:=2;
 if pos('V',pm.sw)<>0 then begin save:=false; show:=true; end;

 e:=getext(ofile);slocase(e);
 ofile:=gettempl(ofile);
 if e='.pcx' then pic_type:=2;
 if e='' then if pic_type=2 then defext:='.pcx' else defext:='.bmp'
	   else defext:=e;

 if openread(f,pm.files[0],'.wax')=-1 then halt;
 loadtables(f);
 if pfile<>'' then loadpal(pfile,'.pal',b) else b.pal:=dpal;

 for i:=0 to cells.n-1 do
 begin
   seek(f,cells.i[i]);
   if show or save then cell_load(f,b);
   if show then doshow(b);
   if save then writebmp(b,namen(ofile,defext,i));
 end;

 if make then
  begin
   getpath(ofile,path);
   get8name(pm.files[0],s);
   s:=path+s+'.txt';
   createmake(s);
  end;
 close(f);
 settext;
end.
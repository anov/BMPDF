{$A+,B-,D+,E-,F-,G-,I-,L+,N-,O-,P-,Q-,R-,S-,T-,V-,X+}
{$M 65000,0,655360}
const idir='';
      odir='';
      maxheight=6000;
      make:boolean=false;
      show:boolean=false;
      save:boolean=true;
      id='#Generated by DF2'#13#10;
      sidir='SET INDIR ';
      sodir='SET OUTDIR ';
      spdir='SET PALDIR ';
      eol=#13#10;
      deol=#13#10#13#10;
      pic_type:byte=1;
      lfd_0:byte=0;

{$i types.inc}
{$i parsedf.inc}
const
defext:ext='.bmp';
dpal:tpal=
((red:0;green:0;blue:0),
(red:252;green:252;blue:252),
(red:208;green:236;blue:252),
(red:168;green:220;blue:252),
(red:124;green:204;blue:252),
(red:84;green:192;blue:252),
(red:252;green:0;blue:0),
(red:204;green:0;blue:0),
(red:144;green:0;blue:0),
(red:68;green:0;blue:0),
(red:0;green:252;blue:0),
(red:0;green:200;blue:0),
(red:0;green:152;blue:0),
(red:0;green:92;blue:0),
(red:0;green:52;blue:0),
(red:0;green:88;blue:252),
(red:0;green:36;blue:240),
(red:0;green:16;blue:188),
(red:0;green:4;blue:140),
(red:248;green:224;blue:96),
(red:244;green:184;blue:52),
(red:244;green:136;blue:12),
(red:216;green:88;blue:12),
(red:180;green:44;blue:4),
(red:252;green:0;blue:252),
(red:252;green:0;blue:252),
(red:252;green:0;blue:252),
(red:252;green:0;blue:252),
(red:252;green:0;blue:252),
(red:252;green:0;blue:252),
(red:252;green:0;blue:252),
(red:252;green:0;blue:252),
(red:232;green:232;blue:232),
(red:224;green:224;blue:224),
(red:216;green:216;blue:216),
(red:208;green:208;blue:208),
(red:204;green:204;blue:204),
(red:196;green:196;blue:196),
(red:188;green:188;blue:188),
(red:180;green:180;blue:180),
(red:172;green:172;blue:172),
(red:168;green:168;blue:168),
(red:160;green:160;blue:160),
(red:152;green:152;blue:152),
(red:144;green:144;blue:144),
(red:140;green:140;blue:140),
(red:132;green:132;blue:132),
(red:124;green:124;blue:124),
(red:116;green:116;blue:116),
(red:112;green:112;blue:112),
(red:104;green:104;blue:104),
(red:100;green:100;blue:100),
(red:92;green:92;blue:92),
(red:88;green:88;blue:88),
(red:80;green:80;blue:80),
(red:76;green:76;blue:76),
(red:68;green:68;blue:68),
(red:64;green:64;blue:64),
(red:56;green:56;blue:56),
(red:52;green:52;blue:52),
(red:44;green:44;blue:44),
(red:40;green:40;blue:40),
(red:32;green:32;blue:32),
(red:28;green:28;blue:28),
(red:100;green:108;blue:132),
(red:92;green:100;blue:120),
(red:84;green:92;blue:112),
(red:76;green:84;blue:104),
(red:72;green:76;blue:96),
(red:64;green:68;blue:84),
(red:56;green:64;blue:76),
(red:52;green:56;blue:68),
(red:44;green:48;blue:60),
(red:36;green:40;blue:48),
(red:28;green:32;blue:40),
(red:24;green:24;blue:32),
(red:16;green:16;blue:24),
(red:8;green:12;blue:12),
(red:4;green:4;blue:4),
(red:0;green:0;blue:0),
(red:252;green:228;blue:176),
(red:236;green:208;blue:152),
(red:220;green:192;blue:132),
(red:208;green:176;blue:116),
(red:192;green:160;blue:96),
(red:180;green:144;blue:80),
(red:164;green:132;blue:68),
(red:148;green:116;blue:52),
(red:136;green:100;blue:40),
(red:120;green:88;blue:28),
(red:108;green:76;blue:20),
(red:92;green:64;blue:12),
(red:76;green:52;blue:8),
(red:64;green:40;blue:4),
(red:48;green:28;blue:0),
(red:36;green:20;blue:0),
(red:224;green:108;blue:12),
(red:212;green:100;blue:8),
(red:200;green:92;blue:8),
(red:188;green:88;blue:4),
(red:176;green:80;blue:4),
(red:168;green:72;blue:4),
(red:156;green:68;blue:4),
(red:144;green:60;blue:4),
(red:132;green:56;blue:0),
(red:120;green:52;blue:0),
(red:112;green:44;blue:0),
(red:100;green:40;blue:0),
(red:88;green:32;blue:0),
(red:76;green:28;blue:0),
(red:64;green:24;blue:0),
(red:56;green:20;blue:0),
(red:128;green:228;blue:100),
(red:112;green:212;blue:84),
(red:100;green:200;blue:68),
(red:92;green:188;blue:56),
(red:80;green:176;blue:44),
(red:68;green:164;blue:32),
(red:60;green:148;blue:24),
(red:52;green:136;blue:12),
(red:44;green:124;blue:8),
(red:36;green:112;blue:0),
(red:32;green:100;blue:0),
(red:48;green:84;blue:4),
(red:56;green:72;blue:4),
(red:56;green:56;blue:8),
(red:44;green:40;blue:8),
(red:32;green:24;blue:8),
(red:252;green:212;blue:200),
(red:244;green:196;blue:180),
(red:240;green:184;blue:164),
(red:232;green:172;blue:148),
(red:224;green:160;blue:132),
(red:220;green:148;blue:116),
(red:212;green:136;blue:104),
(red:208;green:128;blue:92),
(red:200;green:116;blue:76),
(red:196;green:108;blue:64),
(red:188;green:100;blue:52),
(red:184;green:92;blue:40),
(red:176;green:84;blue:32),
(red:172;green:80;blue:20),
(red:164;green:72;blue:12),
(red:160;green:68;blue:4),
(red:148;green:92;blue:0),
(red:136;green:76;blue:0),
(red:124;green:60;blue:0),
(red:112;green:48;blue:0),
(red:104;green:36;blue:0),
(red:92;green:28;blue:0),
(red:80;green:16;blue:0),
(red:72;green:12;blue:0),
(red:0;green:0;blue:252),
(red:0;green:0;blue:224),
(red:0;green:0;blue:200),
(red:0;green:0;blue:176),
(red:0;green:0;blue:148),
(red:0;green:0;blue:124),
(red:0;green:0;blue:100),
(red:0;green:0;blue:76),
(red:252;green:0;blue:0),
(red:224;green:0;blue:0),
(red:196;green:0;blue:0),
(red:168;green:0;blue:0),
(red:140;green:0;blue:0),
(red:112;green:0;blue:0),
(red:84;green:0;blue:0),
(red:56;green:0;blue:0),
(red:252;green:128;blue:0),
(red:224;green:108;blue:0),
(red:200;green:92;blue:0),
(red:176;green:76;blue:0),
(red:152;green:60;blue:0),
(red:128;green:44;blue:0),
(red:104;green:32;blue:0),
(red:80;green:24;blue:0),
(red:192;green:112;blue:68),
(red:180;green:104;blue:60),
(red:168;green:96;blue:56),
(red:156;green:88;blue:52),
(red:148;green:84;blue:48),
(red:136;green:76;blue:44),
(red:124;green:68;blue:36),
(red:116;green:64;blue:32),
(red:104;green:56;blue:28),
(red:92;green:48;blue:24),
(red:80;green:44;blue:20),
(red:72;green:36;blue:16),
(red:60;green:32;blue:12),
(red:48;green:24;blue:8),
(red:40;green:20;blue:8),
(red:60;green:32;blue:16),
(red:184;green:232;blue:252),
(red:168;green:224;blue:248),
(red:156;green:220;blue:248),
(red:140;green:212;blue:244),
(red:128;green:204;blue:240),
(red:116;green:196;blue:240),
(red:100;green:192;blue:236),
(red:88;green:184;blue:236),
(red:76;green:176;blue:232),
(red:64;green:172;blue:232),
(red:52;green:164;blue:228),
(red:40;green:156;blue:228),
(red:28;green:148;blue:224),
(red:16;green:140;blue:224),
(red:4;green:136;blue:220),
(red:0;green:128;blue:220),
(red:100;green:108;blue:132),
(red:96;green:104;blue:128),
(red:92;green:100;blue:120),
(red:88;green:96;blue:116),
(red:84;green:92;blue:112),
(red:80;green:88;blue:108),
(red:80;green:84;blue:104),
(red:76;green:80;blue:100),
(red:72;green:76;blue:96),
(red:68;green:76;blue:92),
(red:64;green:72;blue:88),
(red:60;green:68;blue:84),
(red:60;green:64;blue:80),
(red:56;green:60;blue:72),
(red:52;green:56;blue:68),
(red:48;green:52;blue:64),
(red:44;green:48;blue:60),
(red:40;green:44;blue:56),
(red:40;green:44;blue:52),
(red:36;green:40;blue:48),
(red:32;green:36;blue:44),
(red:28;green:32;blue:40),
(red:24;green:28;blue:36),
(red:24;green:24;blue:32),
(red:20;green:20;blue:24),
(red:16;green:16;blue:20),
(red:12;green:12;blue:16),
(red:8;green:8;blue:12),
(red:4;green:8;blue:8),
(red:4;green:4;blue:4),
(red:0;green:0;blue:0),
(red:0;green:0;blue:0),
(red:0;green:0;blue:144),
(red:0;green:0;blue:132),
(red:0;green:0;blue:120),
(red:0;green:0;blue:112),
(red:0;green:0;blue:100),
(red:0;green:0;blue:88),
(red:0;green:0;blue:80),
(red:0;green:0;blue:68),
(red:0;green:0;blue:60),
(red:0;green:0;blue:48),
(red:0;green:0;blue:36),
(red:0;green:0;blue:28),
(red:0;green:0;blue:16),
(red:0;green:0;blue:4),
(red:0;green:0;blue:0),
(red:252;green:252;blue:252));
var
    pal:tpal;
    f,fout:file;
    t:text;
    buf:array[0..maxheight-1] of byte;
    cbuf:array[0..maxheight-1] of byte;
    bms:array[0..255] of longint;
    b:tbitmap;
    pm:pmrecord;
    s:string;
    pfile,ofile:fname;
{$i df2bmp.inc}

function loadlfdpal(var s:string;var b:tbitmap):integer;
var p:file; i:integer;
   pl:lfd_pal;
begin
loadlfdpal:=-1;
if openread(p,s,'.plt')=-1 then exit;
fread(p,pl,2);
if (pl.first<>0) or (pl.last<>255) then begin Write('Warning: Not a full pallette ',getname(p)); end;
fread(p,pl.pal[pl.first],(pl.last-pl.first+1)*3);
{fread(p,pal,sizeof(pal));}
close(p);
{pal:=dpal;}
for i:=pl.first to pl.last do b.pal[i]:=pl.pal[i];
if errorcode=0 then loadlfdpal:=0 else Fileerror('Read fault',p);
end;

procedure smartguess(var p:pmrecord);
var e:ext;firstpal:boolean;
begin
 firstpal:=false;
 ofile:='';pfile:='';
 if p.files[1]='' then begin get8name(p.files[0],ofile); exit; end;
 e:=getext(p.files[1]);slocase(e);
 if (e='.pal') or (e='.plt') then begin pfile:=p.files[1]; firstpal:=true; end;
 if p.files[2]='' then if firstpal then get8name(p.files[0],ofile)
				   else ofile:=p.files[1]
		  else begin ofile:=p.files[1]; pfile:=p.files[2]; end;
end;


function savebitmap(var f:file;var b:tbitmap):integer;
begin
Write('Saving ',getname(f),'        ',#13);
if pic_type=2 then savebitmap:=savePCX(f,b) else savebitmap:=saveBMP(f,b);
end;



function loadpal(var s:string;de:ext;var b:tbitmap):integer;
var p:file; i:integer;e:ext;
begin
e:=getext(s); slocase(e);
if de='.plt' then if e<>'.pal' then begin loadpal:=loadlfdpal(s,b); exit; end;
if e='.plt' then begin loadpal:=loadlfdpal(s,b); exit; end;
loadpal:=-1;
if openread(p,s,de)=-1 then exit;
fread(p,pal,sizeof(pal));
close(p);
if errorcode<>0 then exit;
for i:=0 to 255 do
 begin
  pal[i].red:=pal[i].red*4;
  pal[i].green:=pal[i].green*4;
  pal[i].blue:=pal[i].blue*4;
 end;
b.pal:=pal;
loadpal:=0;
end;

Function lfd_off(var p:pmrecord):integer;
var f1:file;
  ind:TLFDEntry;
  i:integer;
  n:word;
  ps:longint;
  dir:fname;
  valid:boolean;
begin
lfd_off:=-1;
if openread(f,p.files[0],'.lfd')=-1 then exit;
 dir:=p.files[1];
  if (not (dir[length(dir)] in ['\',':'])) and (dir<>'') then dir:=dir+'\';
 fread(f,ind,sizeof(ind));
 seek(f,sizeof(ind)+ind.size);
 if make then
 begin
  writeln(t,id);
  Write(t,sidir,dir,eol,sodir,eol,spdir,deol);
  Writeln(t,'LFD ',get13name(p.files[0]),' ',ind.size div sizeof(ind));
 end;

while not eof(f) do
begin
 ps:=filepos(f);
 fread(f,ind,sizeof(ind));
 ofile:=dir+nt2s(ind.name,8)+tag2ext(ind.tag,valid);
 if save then if openwrite(f1,ofile,'')=-1 then exit;
 if save then Write('Writing ',ofile) else Write(ofile,' ',ind.size,' bytes');
 if save then copyfile(f,f1,ind.size,heapptr,memavail) else seek(f,filepos(f)+ind.size);
 Writeln;
 if make then
  begin
   Write(t,nt2s(ind.name,8)+tag2ext(ind.tag,valid));
   if valid then Writeln(t) else Writeln(t,' ',nt2s(ind.tag,4));
  end;
 if save then close(F1);
end;
if errorcode=0 then lfd_off:=0;
end;


procedure bm_off(var p:pmrecord);
var
    h:bm_header;i:integer;pos,cpos:longint;
    mh:bm_mheader;
    m:bm_multi;
    n8:name8;
    templ:fname;
    name:fname;

function num(n:byte):ext;
var s:ext;
begin
 str(n:2,s);
 if s[0]>#2 then s[0]:=#2;
 if s[1]=' ' then s[1]:='0';
 num:=s;
end;

Procedure bmsimple(var f:file;var h:bm_header;var ofile:fname);
begin
 if bmreaddata(f,h,b,simple)=-1 then exit;
 if show then doshow(b);
 if save then if openwrite(fout,ofile,defext)=-1 then exit;
 if make then
 begin
  Writeln(t,id);
  Write(t,sidir,eol,sodir,eol,spdir,deol);
  Writeln(t,'SIMPLE ',get13name(p.files[0]));
  write(t,get13name(getname(fout)));
  if h.transparent=$3e then write(t,' /t');
  if h.compressed<>0 then write(t,' /',h.compressed);
  writeln(t,' ',get13name(pfile));
  writeln(t);
 end;
 if save then savebitmap(fout,b);
end;

begin
if openread(f,p.files[0],'.bm')=-1 then exit;
if pfile='' then b.pal:=dpal else if loadpal(pfile,'.pal',b)=-1 then begin b.pal:=dpal; pfile:=''; end;
if bmreadmagic(f)=-1 then begin Fileerror('Not a BM file',f);exit; end;
bmreadheader(f,h);
if h.sizex<>1 then bmsimple(f,h,ofile) else
begin
  get8name(ofile,n8);
  if n8[0]>#6 then n8[0]:=#6;
  getpath(ofile,templ);
  templ:=templ+n8;

 fread(f,m,sizeof(m));
  if make then
  begin
   Writeln(t,id);
   Write(t,sidir,eol,sodir,eol,spdir,deol);
   if m.speed=0 then Write(t,'Switch') else write(t,'Animated');
   write(t,' ',get13name(p.files[0]));
   if m.speed<>0 then writeln(t,' ',h.idemy,' ',m.speed) else writeln(t);
  end;

 cpos:=filepos(f);
for i:=0 to h.idemy-1 do
begin
 seek(f,cpos);
 fread(f,pos,sizeof(pos));
 seek(f,pos+$22);
 name:=templ+num(i)+defext;;
 bmreadheader(f,mh);
 if bmreaddata(f,mh,b,multi)=-1 then exit;
 if show then doshow(b);
 if save then if openwrite(fout,name,'')=-1 then exit;
 if save then if savebitmap(fout,b)=-1 then exit;
 if make then
  begin
   write(t,get13name(name));
   if mh.transparent=$3e then write(t,' /t ');
   writeln(t,' ',get13name(pfile));
  end;
  if save then close(fout);
 inc(cpos,sizeof(pos));
end;
end;
end;

procedure fme_off(var p:pmrecord);
var fd:fme_details;
begin
if openread(f,p.files[0],'.fme')=-1 then exit;
if fmeload(f,b,fd)=-1 then exit;
if save then if openwrite(fout,ofile,defext)=-1 then exit;
if pfile='' then b.pal:=dpal else if loadpal(pfile,'.pal',b)=-1 then begin b.pal:=dpal; pfile:=''; end;
if show then doshow(b);
if save then if savebitmap(fout,b)=-1 then exit;

if make then
begin
 Writeln(t,id);
 Write(t,sidir,eol,sodir,eol,spdir,deol);
 Write(t,'FRAME ',get13name(p.files[0]));
 if (-(fd.xshift)*2)<>b.w then write(t,' ',fd.xshift);
 if (-(fd.yshift))<>b.h then write(t,' ',fd.yshift);
 writeln(t);
 write(t,get13name(getname(fout)));
 if not fd.compressed then write(t,' /u ');
 writeln(t,' ',get13name(pfile));
 writeln(t);
end;
end;

procedure delt_off(var p:pmrecord);
begin
if openread(f,p.files[0],'.dlt')=-1 then exit;
if delt_load(f,b,filesize(f))=-1 then exit;
if save then if openwrite(fout,ofile,defext)=-1 then exit;
if pfile='' then b.pal:=dpal else if loadpal(pfile,'.plt',b)=-1 then begin b.pal:=dpal; pfile:=''; end;
if show then doshow(b);
if save then if savebitmap(fout,b)=-1 then exit;
if make then
begin
 Writeln(t,id);
 Write(t,sidir,eol,sodir,eol,spdir,eol,eol);
 Writeln(t,'DELT ',get13name(p.files[0]));
 write(t,get13name(getname(fout)),' ',get13name(pfile));
 if lfd_0<>0 then write(t,' /0=',lfd_0);
 writeln(t);
end;
end;

procedure anim_off(var p:pmrecord);
var ah:anim_head;
    dh:anim_dhead;
    n8:name8;
    templ:fname;
    name:fname;
    i:integer;pos,cpos:longint;

function num(n:byte):ext;
var s:ext;
begin
 str(n:3,s);
 if s[0]>#3 then s[0]:=#3;
 if s[1]=' ' then s[1]:='0';
 if s[2]=' ' then s[2]:='0';
 num:=s;
end;

begin
if openread(f,p.files[0],'.anm')=-1 then exit;
if pfile='' then b.pal:=dpal else if loadpal(pfile,'.pal',b)=-1 then begin b.pal:=dpal; pfile:=''; end;
fread(f,ah,sizeof(ah));
  get8name(ofile,n8);
  if n8[0]>#5 then n8[0]:=#5;
  getpath(ofile,templ);
  templ:=templ+n8;
  if make then
  begin
   Writeln(t,id);
   Write(t,sidir,eol,sodir,eol,spdir,deol);
   Writeln(t,'ANIM ',get13name(p.files[0]),' ',ah.ndelts);
  end;
 cpos:=filepos(f);
for i:=0 to ah.ndelts-1 do
begin
 seek(f,cpos);
 fread(f,dh,sizeof(dh));
 name:=templ+num(i)+defext;
 if delt_load(f,b,dh.delt_size)=-1 then exit;
 if show then doshow(b);
 if save then if openwrite(fout,name,'')=-1 then exit;
 if save then if savebitmap(fout,b)=-1 then exit;
 if make then
  begin
   write(t,get13name(name),' ',get13name(pfile));
   if lfd_0<>0 then write(t,' /0=',lfd_0);
   writeln(t);
  end;
  if save then close(fout);
 inc(cpos,dh.delt_size+sizeof(dh));
end;
end;

function get_cmd_name(n:integer):ident;
var s:string[10];
begin
case n of
	cm_end: get_cmd_name:='END';
	cm_time: get_cmd_name:='*TIME*';
	cm_move: get_cmd_name:='MOVE';
	cm_speed: get_cmd_name:='SPEED';
	cm_layer: get_cmd_name:='LAYER';
	cm_frame: get_cmd_name:='FRAME';
	cm_animate: get_cmd_name:='ANIMATE';
	cm_cue:get_cmd_name:='CUE';
	cm_var:get_cmd_name:='VAR';
	cm_window: get_cmd_name:='WINDOW';
	cm_switch: get_cmd_name:='SWITCH';
	cm_14: get_cmd_name:='????';
	cm_pal: get_cmd_name:='PALETTE';
	cm_cut: get_cmd_name:='CUT';
	cm_loop: get_cmd_name:='LOOP';
	cm_preload: get_cmd_name:='PRELOAD';
	cm_sound: get_cmd_name:='SOUND';
	cm_stereo: get_cmd_name:='STEREO';
	else begin
	      str(n,s);
	      get_cmd_name:='"'+s+'"';
	     end;
end;
end;

function get_param_str(var fc:film_command):string;
type	s6=string[6];
var	s:string; p:byte;
	n,l:integer;
function i2s(i:integer):s6;
var s:s6;
begin
str(i,s);
i2s:=s;
end;

begin
s:=''; n:=(fc.h.cmd_size-4) div 2; p:=0;
case fc.h.command of
	cm_time: begin
		  p:=1;
		  case fc.params[0] of
		   0: s:=' Start';
		   else s:=concat(s,' ',i2s(fc.params[0] div 10),'.',i2s(fc.params[0] mod 10));
		  end;
		 end;
	cm_animate: begin
		     p:=1;
		     case fc.params[0] of
		      0: s:=' Off';
		      1: s:=' Forwards';
		     -1: s:=' Backwards';
		     else s:=' '+i2s(fc.params[0]);
		     end;
		    end;
	cm_switch: begin
		    p:=1;
		    case fc.params[0] of
		     0: s:=' Off';
		     1: s:=' On';
		    else s:=' '+i2s(fc.params[0]);
		    end;
		   end;
	cm_cut: begin
		    p:=2;
		    case fc.params[0] of
		     1: s:=' Swap';
		     2: s:=' Clear';
		     3: s:=' Dirty';
		    12: s:=' FadeRight';
		    13: s:=' FadeLeft';
		    14: s:=' FadeUp';
		    15: s:=' FadeDown';
		    21: s:=' FadeUpDown';
		  2333: s:=' FadeToBlack';
		    23: s:=' Stop';
		    else s:=' '+i2s(fc.params[0]);
		    end;
		    case fc.params[1] of
		     2: s:=concat(s,' Old');
		     3: s:=concat(s,' End');
		     4: s:=concat(s,' New');
		    else s:=' '+i2s(fc.params[0]);
		    end;
		 end;
	cm_sound: begin
		   p:=1;
		    case fc.params[0] of
		     0: s:=' Off';
		     1: begin
			 p:=5;
			 s:=concat(' On ',i2s(fc.params[1]),'% ',i2s(fc.params[2]),' ',i2s(fc.params[3]));
			 if n>4 then
			 case fc.params[4] of
			  0: s:=concat(s,' Left');
			  127,128: s:=concat(s,' Center');
			  255: s:=concat(s,' Right');
			  else s:=concat(s,' ',i2s(fc.params[4]));
			 end;
			end;
		    else s:=' '+i2s(fc.params[0]);
		    end;
		  end;
     end;
for l:=p to n-1 do s:=s+' '+i2s(fc.params[l]);
get_param_str:=s;
end;

procedure film_off(var p:pmrecord);
var	fh:film_head;
	fb:film_block;
	fc:film_command;
	i,j,l,n:integer;
	cmnt:string[30];
begin
if openread(f,p.files[0],'.flm')=-1 then exit;
Writeln('Processing ',getname(f));
Writeln(t,id); Writeln(t,'FILM ',get13name(getname(f)));
fread(f,fh,sizeof(fh));
if fh.four<>4 then writeln('Warning: Possibly corrupted FILM ',getname(f));
Writeln(t,(fh.duration/10):0:1,' Seconds');
for i:=1 to fh.nblocks do
begin
 fread(f,fb,sizeof(fb));
 writeln(t,'>',nt2s(fb.typename,4),' ',nt2s(fb.filename,8));
 for j:=1 to fb.ncommands do
 begin
   fread(f,fc.h,sizeof(fc.h));
   n:=(fc.h.cmd_size-4) div 2;
   fread(f,fc.params,n*2);
   Write(t,get_cmd_name(fc.h.command));
   if fc.h.command=cm_end then cmnt:=' #######END OF BLOCK######' else cmnt:='';
   writeln(t,get_param_str(fc),cmnt);
 end;
end;
 fread(f,fb,18);
 writeln(t,'>',nt2s(fb.typename,4),' ',nt2s(fb.filename,8));
 writeln(t);
 if errorcode<>0 then fileerror('Unexpected EOF',f);
end;

Procedure Help(s:string);
begin
 if s<>'' then writeln(s);
 Writeln('DF2 - converts different Dark Forces graphics file formats'#13#10+
	 'to Windows 256 color BMP or PCX files. Also disassembles LFD files');
 Writeln('DF2 [switches] [file1] [file2] [file3]'#13#10+
	 'File1 - file to process, File2 - BMP file, File3 - PAL file'#13#10+
	 'If palette is not specified, default is used');
 Writeln('Switches:'#13#10+
	 '/X - force PCX output'#13#10+
	 '/F - force FME input'#13#10+
	 '/D - force DELT input (DLT, DF briefings)'#13#10+
	 '/B - force BM input'#13#10+
	 '/L - force LFD input'#13#10+
	 '/A - force ANIM input');
 Writeln('/Z - force FILM input (sorry, ran out of letters)'#13#10+
	 '/M - generate makefile for 2DF (see BMPDF.TXT and MAKEFILE.TXT)'#13#10+
	 '/S - show loaded files'#13#10+
	 '/V - show loaded files and do not perform any conversion (View)');
 Writeln('/0=# - set color # a background (transparent) color for DELT and ANIM.');
 Writeln('IMPORTANT! [file2](pal file) for DELT files must be LFD style palette (.plt)'#13#10+
	 'not standard DF .pal file!'#13#10+
	 'In case of LFD input file [file2] is the output directory');
 Writeln('Examples:'#13#10,
	 ' df2 brick.bm dfuse.pal'#13#10,
	 ' df2 /b/m bars.bm'#13#10,
	 ' df2 /f vader01.fm1 secbase.pal'#13#10,
	 ' df2 dfbrief.lfd'#13#10,
	 ' df2 /s/m zaspin.bm'#13#10+
	 ' df2 /m secbase.dlt brf-jan.plt');
 halt;
end;

procedure getparams;
begin
 parse(string(ptr(PrefixSeg,$80)^),pm);
 if (pm.files[0]='') then help('');
end;

procedure set_lfd_0(var p:pmrecord);
var s:^string; w:string[20]; p0:byte;a,v:word;
begin
p0:=pos('0',pm.sw); if p0=0 then exit;
s:=ptr(PrefixSeg,$80);
getword(s^,pm.swpos[p0],w);
if (length(w)<4) or (w[3]<>'=') then begin Writeln('Invalid /0=# switch');exit; end;
delete(w,1,3);val(w,v,a);
if a<>0 then begin writeln('Invalid # of transparent color: ',w); exit; end;
if v>255 then begin writeln('# of transparent color must be <=255'); exit; end;
lfd_0:=v;
end;

var i,n:integer;
d:bm_details;
 action:(lfd,fme,bm,dlt,anm,def,flm);
 oext:ext; path:fname;
begin
filemode:=0;
getparams;
action:=def;
 oext:=getext(pm.files[0]);
 slocase(oext);
 if oext='.fme' then action:=fme;
 if oext='.bm' then action:=bm;
 if oext='.dlt' then action:=dlt;
 if oext='.anm' then action:=anm;
 if oext='.lfd' then action:=lfd;
 if oext='.flm' then action:=flm;
 if pos('M',pm.sw)<>0 then make:=true;
 if pos('S',pm.sw)<>0 then show:=true;
 if pos('X',pm.sw)<>0 then begin pic_type:=2; defext:='.pcx'; end;
 if pos('V',pm.sw)<>0 then begin save:=false; show:=true; end;

 if pos('0',pm.sw)<>0 then set_lfd_0(pm);
 if pos('F',pm.sw)<>0 then action:=fme;
 if pos('B',pm.sw)<>0 then action:=bm;
 if pos('D',pm.sw)<>0 then action:=dlt;
 if pos('L',pm.sw)<>0 then action:=lfd;
 if pos('A',pm.sw)<>0 then action:=anm;
 if pos('Z',pm.sw)<>0 then action:=flm;

 if action<>lfd then smartguess(pm) else addslash(pm.files[1]);
 if action=flm then make:=true;

 oext:=getext(ofile);slocase(oext);
 if oext='.pcx' then begin defext:=oext; pic_type:=2; end;
 if make then
  begin
   getpath(ofile,path);
   get8name(pm.files[0],s);
   if action=flm then
     begin
      s:=ofile;
      oext:=getext(s); if oext='' then s:=s+'.txt';
     end
     else s:=path+s+'.txt';
   assign(t,s); reset(t); if ioresult=0 then begin Writeln('Error: File ',s,' exists!'); exit; end;
   rewrite(t);
   if ioresult<>0 then begin Writeln('Can''t create makefile',s); make:=false; end;
  end;

 case action of
	lfd:lfd_off(pm);
	fme:fme_off(pm);
	dlt:delt_off(pm);
	anm:anim_off(pm);
	flm:film_off(pm);
       else BM_off(pm);
 end;
 settext;
 if make then close(t);
 close(f); close(fout);
end.